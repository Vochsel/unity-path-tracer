#pragma kernel CSMain

#define M_PI 3.14159265359f
#define ASPECT WIDTH/HEIGHT
#define SAMPS 1
#define EPSILON 0.0001f

Texture2D<float4> Input;
RWTexture2D<float4> Result;

float camFOV;
float4x4 camToWorld;
float4x4 worldToCam;

int WIDTH;
int HEIGHT;

float time;
float textureWeight;
 
#include "PTDataLib.cginc"
#include "PTMaths.cginc"

StructuredBuffer<ptRenderSettings> SETTINGS; 

RWStructuredBuffer<ptObject> objects;
RWStructuredBuffer<ptLight> lights;

bool intersect_scene(inout Ray r, inout float t, inout int id, inout float cdepth, inout ptHit a_hit) {

	// Initialize scene variables
	float n = 6, d, inf = t = 1e20;
	float dd = 0.0f;
	ptHit tHit;

	// Get number of objects in buffer
	uint numObjects, stride;
	objects.GetDimensions(numObjects, stride);

	// For all objects, check intersection based on type
	for(int i = int(numObjects); i--;) {

		switch(objects[i].shapeType) 
		{
			// -- Box
			case 1:
			{
				// Not implemented, just draw sphere
				if ((d = intersect_sphere(objects[i], r, dd, tHit)) && d < t) {
					t = d;
					id = i;
					cdepth = dd;
					a_hit = tHit;
				}
			}
			break;

			// -- Plane
			case 2:
			{
				if ((d = intersect_plane(objects[i], r, dd, tHit)) && d < t) {
					t = d;
					id = i;
					cdepth = dd;
					a_hit = tHit;
				}
			}
			break;

			// -- Worst case just draw sphere
			default:
			{
				if ((d = intersect_sphere(objects[i], r, dd, tHit)) && d < t) {
					t = d;
					id = i;
					cdepth = dd;
					a_hit = tHit;
				}
			}
			break;
		}
	}

	// Return true if hit scene, else return false
	return t<inf;
}

static float origRand(inout uint s0, inout uint s1) {
	uint offset = asuint(textureWeight); // Default offset
	//uint offset = asuint(time); // Time offset	

	// Hash seeds and shift
	s0 = 36969 * ((s0 + offset) & 65535) + ((s0 + offset) >> 16);
	s1 = 18000 * ((s1 + offset) & 65535) + ((s1 + offset) >> 16);

	uint ires = ((s0) << 16) + (s1);

	uint ui = (ires & 0x007fffff) | 0x40000000;
	float uf = asfloat(ui);

	return (uf - 2.f) / 2.f;
}

static float getrandom(inout uint seed0, inout uint seed1) {
	return origRand(seed0, seed1);
} 

// Calculate ray colour and accumulated radiance for the scene
float3 radiance(Ray r2, inout uint s1, inout uint s2) {

	// Accumulates colou
	float3 accucolor = float3(0.0f, 0.0f, 0.0f);
	float3 mask = float3(1.0f, 1.0f, 1.0f);

	Ray r = MakeRay(r2.orig, r2.dir);

	int MAXBOUNCE = SETTINGS[0].bounces;

	// Ray bounce
	for (int bounces = 0; bounces < MAXBOUNCE; bounces++) {

		// Closest intersection distance
		float t;
		// Object index
		int id = 0;

		float cdepth = 0.0f;
	
		ptHit sceneHit;

		if (!intersect_scene(r, t, id, cdepth, sceneHit)) {
			break; //return accucolor;
		}

		// Object that was hit
		ptObject obj = objects[id];

		float3 x = sceneHit.position;
		float3 n = sceneHit.normal;

		// Front facing normal
		float3 nl = dot(n, r.dir) < 0 ? n : n * -1;
		
		accucolor += mask * obj.material.emission.xyz;
		
		// Generate two random numbers in hemisphere
		float r1 = 2 * M_PI * getrandom(s1, s2);
		float r2 = getrandom(s1, s2);
		float r2s = sqrt(r2);
 
		// Compute local orthonormal basis uvw at hitpoint to use for calculation random ray direction 
		// First vector = normal at hitpoint, second vector is orthogonal to first, third vector is orthogonal to first two vectors
		float3 w = nl;
		float3 u = normalize(cross((abs(w.x) > .1 ? float3(0, 1, 0) : float3(1, 0, 0)), w));
		float3 v = cross(w, u);

		// Compute random ray direction on hemisphere using polar coordinates
		// Cosine weighted importance sampling (favours ray directions closer to normal direction)
		float3 d = normalize(u*cos(r1)*r2s + v*sin(r1)*r2s + w*sqrt(1 - r2));
		
		// Compute reflected dir
		float3 reflDir = reflect(r.dir, n);
		r.orig = x + nl*EPSILON;
		r.dir = lerp(d, reflDir, obj.material.metallic);

		mask *= obj.material.albedo.xyz;
 
		// Weigh light contribution using cosine of angle between incident light and normal
		mask *= dot(d, nl);

		// Fudge mask
		mask *= 1.5;

		// Return if not first bounce
		if(bounces > 0)
			continue;

		// Look for lights and accumulate lighting information
		uint numLights, lightStride;
		lights.GetDimensions(numLights, lightStride);
		if(numLights > 0) {
			for(int i = int(numLights); i--;) {

				float falloff = 0.0;
				float lightPower = 0.0;
				float3 L = float3(0., 0., 0.);

				// Point light
				if(lights[i].lightType == 0) {
					float3 lightPos = lights[i].worldMatrix._m03_m13_m23;
					L = (lightPos - x);
					L /= lights[i].range/8.0;
					falloff = length(L);
					L = normalize(L);		

					lightPower = lights[i].intensity * (1./falloff);
				}
				// Directional light
				else if(lights[i].lightType == 1) {
					L = normalize(mul(lights[i].worldMatrix, float4(0., 0., -1., 0.))).xyz;
					falloff = 1.;
					lightPower = lights[i].intensity;
				}

				int sid = 0;
				float scdepth = 0.0f, st = 0.0f;
				ptHit ssdepth;
				Ray sray = MakeRay(x + (nl*EPSILON), L + (d * 0.2));
	
				if(!intersect_scene(sray, st, sid, scdepth, ssdepth)) {
					accucolor += mask * max(0.f, dot(nl, L)) * lights[i].color * lightPower;
				}
			}
		}
			
	}

	return accucolor;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int ww = SETTINGS[0].outputWidth;
	int hh = SETTINGS[0].outputHeight;
	
	float2 resolution = float2 (ww, hh);
    float2 coordinates = float2 (id.x,id.y);
    float2 p = (coordinates.xy/resolution.xy);

	uint x = coordinates.x;
	uint y = coordinates.y;	

	// Current pixel index
	uint i = (hh - y - 1)*ww + x;

	// Random seeds
	uint s1 = x ;
	uint s2 = y ;

	float fov = camFOV * (M_PI / 180.0f);

	// Calculate ray direction for pixel

	float2 co = p * 2.0 - 1.0;
	co.x *= (float)ww / (float)hh;

	float3 r = float3(0.0f, 0.0f, 0.0f); 

	float imgAspect = (float)ww / (float)hh;
	float Px = (2.0f * ((x - 0.5) / ww) - 1) * imgAspect;
	float Py = (1.0f - 2.0f * ((y - 0.5) / hh) );

	float4 d = normalize(float4(Px, -Py, -1, 0));	

	float3 cop = camToWorld._m03_m13_m23;
	float3 cdp = normalize(mul(camToWorld, d).xyz).xyz;

	// Compute samples
	for (int s = 0; s < SETTINGS[0].samples; s++) { 
		r = r + radiance(MakeRay(cop, cdp), s1, s2)*(1. / SETTINGS[0].samples);
	}

	// Pixel output
	float4 outt = float4(r.x, r.y, r.z, 1.0);
	
	// Blend with last render to converge final image
	Result[id.xy] = lerp(outt, Input[id.xy], textureWeight);
}
